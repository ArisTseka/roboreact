{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/SearchBox.jsx","components/ErrorBoundry.jsx","containers/App.jsx","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","onChange","placeholder","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","paylaod","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a3b4bc83.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) => {\r\n  const { name, email, id } = props;\r\n  return (\r\n    <div className=\" tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n      <p> {email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.jsx';\r\n\r\nconst CardList = ({robots}) => {\r\n  // if(true){\r\n  //   // Throw Errow to test ErrorBoundry\r\n  //   throw new Error(\"Noooo\");\r\n  // }\r\n  return (\r\n    <div>\r\n\r\n      {/* // With .map we can loop through an Array 1st arg = the current objest 2nd the index {i}\r\n       // If we dont Have the deleted prop then !!ON DELETE!! we don't know what to change\r\n       // so react load all page again from Virtual DOM */}\r\n\r\n      {\r\n        robots.map((user,i) => {\r\n          return (<Card key={i} id={robots[i].id}\r\n                   name={robots[i].name} email={robots[i].email} />);\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style={{overflowY: 'scroll',border: '1px solid black',height: '600px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        onChange={searchChange} \r\n        placeholder=\"search robots\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React , {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error,info){\r\n    this.setState({hasError:true})\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Oppps. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React,{ Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList.jsx';\r\n// import {robots} from './robots';\r\nimport Scroll from '../components/Scroll.jsx';\r\nimport SearchBox from '../components/SearchBox.jsx';\r\nimport ErrorBoundry from '../components/ErrorBoundry.jsx';\r\nimport './App.css'\r\n\r\nimport { setSearchField,requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return{\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n// In order to have states you must use class syntax\r\n  // constructor(){\r\n  //   super()\r\n  //     this.state = {\r\n  //     robots: [] //declaring the states\r\n  //     // searchfield: ''\r\n  //   }\r\n  // }\r\n\r\n  componentDidMount (){\r\n   this.props.onRequestRobots()\r\n  }\r\n\r\n  // // Only with () => fucntion this is reffering to the Class\r\n  // onSearchChange = (event) => {\r\n  //   // Change the value of the searchFiled on change the input\r\n  //   this.setState({ searchfield: event.target.value })\r\n  // }\r\n\r\n  render( ) {\r\n    // filter the robots Displaying\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n    const filterRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n\r\n\r\n    if (isPending) {\r\n      return <h1 className='tc'>Loading ...</h1>\r\n    }else{\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"--washed-blue\">Robo friends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n// We create a function that is returning an Object.For searching the robots\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n})\r\n\r\nexport const requestRobots = () =>(dispatch) => {\r\n  dispatch({ type:  REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, paylaod:error}))\r\n  }\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending:true})\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, { robots: action.payload, isPending:false })\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, { error: action.payload, isPending:false })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n//Is esential to be Desctractured else we cannot use that\nimport 'tachyons';\n\nimport { searchRobots, requestRobots } from './reducers';\n\n// The logger of redux\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store  = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <Provider store={store}>\n        <App  />\n      </Provider>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}